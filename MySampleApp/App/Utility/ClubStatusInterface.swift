//
//  ClubStatusTable.swift
//  MySampleApp
//
//
// Copyright 2017 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to 
// copy, distribute and modify it.
//
// Source code generated from template: aws-my-sample-app-ios-swift v0.8
//

import Foundation
import UIKit
import AWSDynamoDB
import AWSMobileHubHelper

class ClubStatusInterface: NSObject {
    
    var tableName: String
    var partitionKeyName: String
    var partitionKeyType: String
    var sortKeyName: String?
    var sortKeyType: String?
    var model: AWSDynamoDBObjectModel
    var indexes: [Index]
    var orderedAttributeKeys: [String] {
        return produceOrderedAttributeKeys(model)
    }
    var tableDisplayName: String {

        return "club-status"
    }
    
    override init() {

        model = ClubStatus()
        
        tableName = model.classForCoder.dynamoDBTableName()
        partitionKeyName = model.classForCoder.hashKeyAttribute()
        partitionKeyType = "String"
        indexes = [
            ClubStatusPrimaryIndex(),
            ClubStatusQueryByDay(),
        ]
        if (model.classForCoder.respondsToSelector("rangeKeyAttribute")) {
            sortKeyName = model.classForCoder.rangeKeyAttribute!()
            sortKeyType = "Number"
        }
        super.init()
    }
    
    func getClubStatusForDate(club : String, date : NSDate)
    {
        
    }
    
    func getClubStatusForDateRange(club : String, startDate : NSDate, endDate : NSDate)
    {
        
    }
    
    func produceOrderedAttributeKeys(model: AWSDynamoDBObjectModel) -> [String] {
        let keysArray = Array(model.dictionaryValue.keys)
        var keys = keysArray as! [String]
        keys = keys.sort()
        
        if (model.classForCoder.respondsToSelector("rangeKeyAttribute")) {
            let rangeKeyAttribute = model.classForCoder.rangeKeyAttribute!()
            let index = keys.indexOf(rangeKeyAttribute)
            if let index = index {
                keys.removeAtIndex(index)
                keys.insert(rangeKeyAttribute, atIndex: 0)
            }
        }
        model.classForCoder.hashKeyAttribute()
        let hashKeyAttribute = model.classForCoder.hashKeyAttribute()
        let index = keys.indexOf(hashKeyAttribute)
        if let index = index {
            keys.removeAtIndex(index)
            keys.insert(hashKeyAttribute, atIndex: 0)
        }
        return keys
    }

}


class ClubStatusPrimaryIndex: NSObject, Index {
    
    var indexName: String? {
        return nil
    }
    
    func supportedOperations() -> [String] {
        return [
            QueryWithPartitionKey,
            QueryWithPartitionKeyAndSortKey,
        ]
    }
    
    func queryWithPartitionKeyDescription() -> String {
        return "Find all items with club = \("demo-club-3")."
    }
    
    func queryWithPartitionKeyWithCompletionHandler(completionHandler: (response: AWSDynamoDBPaginatedOutput?, error: NSError?) -> Void) {
        let objectMapper = AWSDynamoDBObjectMapper.defaultDynamoDBObjectMapper()
        let queryExpression = AWSDynamoDBQueryExpression()
        
        queryExpression.keyConditionExpression = "#club = :club"
        queryExpression.expressionAttributeNames = ["#club": "club",]
        queryExpression.expressionAttributeValues = [":club": "demo-club-3",]
        
        objectMapper.query(ClubStatus.self, expression: queryExpression, completionHandler: {(response: AWSDynamoDBPaginatedOutput?, error: NSError?) -> Void in
            dispatch_async(dispatch_get_main_queue(), {
                completionHandler(response: response, error: error)
            })
        })
    }
    
    func queryWithPartitionKeyAndSortKeyDescription() -> String {
        return "Find all items with club = \("demo-club-3") and night_of < \(1111500000)."
    }
    
    func queryWithPartitionKeyAndSortKeyWithCompletionHandler(completionHandler: (response: AWSDynamoDBPaginatedOutput?, error: NSError?) -> Void) {
        let objectMapper = AWSDynamoDBObjectMapper.defaultDynamoDBObjectMapper()
        let queryExpression = AWSDynamoDBQueryExpression()
        
        queryExpression.keyConditionExpression = "#club = :club AND #nightOf < :nightOf"
        queryExpression.expressionAttributeNames = [
            "#club": "club",
            "#nightOf": "night_of",
        ]
        queryExpression.expressionAttributeValues = [
            ":club": "demo-club-3",
            ":nightOf": 1111500000,
        ]
        
        
        objectMapper.query(ClubStatus.self, expression: queryExpression, completionHandler: {(response: AWSDynamoDBPaginatedOutput?, error: NSError?) -> Void in
            dispatch_async(dispatch_get_main_queue(), {
                completionHandler(response: response, error: error)
            })
        })
    }
    
}

class ClubStatusQueryByDay: NSObject, Index {
    
    var indexName: String? {
        
        return "query_by_day"
    }
    
    func supportedOperations() -> [String] {
        return [
            QueryWithPartitionKey,
            QueryWithPartitionKeyAndSortKey,
        ]
    }
    
    func queryWithPartitionKeyDescription() -> String {
        return "Find all items with night_of = \(1111000003)."
    }
    
    func queryWithPartitionKeyWithCompletionHandler(completionHandler: (response: AWSDynamoDBPaginatedOutput?, error: NSError?) -> Void) {
        let objectMapper = AWSDynamoDBObjectMapper.defaultDynamoDBObjectMapper()
        let queryExpression = AWSDynamoDBQueryExpression()
        
        
        queryExpression.indexName = "query_by_day"
        queryExpression.keyConditionExpression = "#nightOf = :nightOf"
        queryExpression.expressionAttributeNames = ["#nightOf": "night_of",]
        queryExpression.expressionAttributeValues = [":nightOf": 1111000003,]
        
        objectMapper.query(ClubStatus.self, expression: queryExpression, completionHandler: {(response: AWSDynamoDBPaginatedOutput?, error: NSError?) -> Void in
            dispatch_async(dispatch_get_main_queue(), {
                completionHandler(response: response, error: error)
            })
        })
    }
    
    func queryWithPartitionKeyAndSortKeyDescription() -> String {
        return "Find all items with night_of = \(1111000003) and club < \("demo-club-500000")."
    }
    
    func queryWithPartitionKeyAndSortKeyWithCompletionHandler(completionHandler: (response: AWSDynamoDBPaginatedOutput?, error: NSError?) -> Void) {
        let objectMapper = AWSDynamoDBObjectMapper.defaultDynamoDBObjectMapper()
        let queryExpression = AWSDynamoDBQueryExpression()
        
        
        queryExpression.indexName = "query_by_day"
        queryExpression.keyConditionExpression = "#nightOf = :nightOf AND #club < :club"
        queryExpression.expressionAttributeNames = [
            "#nightOf": "night_of",
            "#club": "club",
        ]
        queryExpression.expressionAttributeValues = [
            ":nightOf": 1111000003,
            ":club": "demo-club-500000",
        ]
        
        
        objectMapper.query(ClubStatus.self, expression: queryExpression, completionHandler: {(response: AWSDynamoDBPaginatedOutput?, error: NSError?) -> Void in
            dispatch_async(dispatch_get_main_queue(), {
                completionHandler(response: response, error: error)
            })
        })
    }
    
}

