//
//  UserPoolSignUpViewController.swift
//  MySampleApp
//
//
// Copyright 2016 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to 
// copy, distribute and modify it.
//
// Source code generated from template: aws-my-sample-app-ios-swift v0.8
//
//

import Foundation
import UIKit
import AWSMobileHubHelper
import AWSCognitoIdentityProvider

class UserPoolSignUpViewController: UIViewController {
    
    var pool: AWSCognitoIdentityUserPool?
    var sentTo: String?
    
    @IBOutlet weak var userName: UITextField!
    @IBOutlet weak var password: UITextField!
    @IBOutlet weak var passwordConfirmation: UITextField!
    
    @IBOutlet weak var phone: UITextField!
    @IBOutlet weak var email: UITextField!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        self.pool = AWSCognitoIdentityUserPool.init(forKey: AWSCognitoUserPoolsSignInProviderKey)
        self.view.addBackground()
        navigationController!.navigationBar.barTintColor = UIColor(red: 0xF5/255.0, green: 0x85/255.0, blue: 0x35/255.0, alpha: 1.0)
        navigationController!.navigationBar.tintColor = UIColor.whiteColor()
        userName.backgroundColor = UIColor.clearColor()
        userName.borderStyle = UITextBorderStyle.None
        password.backgroundColor = UIColor.clearColor()
        password.borderStyle = UITextBorderStyle.None
        passwordConfirmation.backgroundColor = UIColor.clearColor()
        passwordConfirmation.borderStyle = UITextBorderStyle.None
        
    }
    
    override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) {
        if let signUpConfirmationViewController = segue.destinationViewController as? UserPoolSignUpConfirmationViewController {
            signUpConfirmationViewController.sentTo = self.sentTo
            signUpConfirmationViewController.user = self.pool?.getUser(self.userName.text!)
        }
    }
    
    @IBAction func onSignUp(sender: AnyObject) {    

        guard let netID = self.userName.text?.lowercaseString where !netID.isEmpty && netID.isAlphanumeric
            else {
                self.requiredFieldsError("Please provide a Princeton NetID.")
                return
        }
        
        //we get the email from the netID
        let emailValue = netID + "@princeton.edu"
        
        guard let passwordValue = self.password.text where !passwordValue.isEmpty
            else {
                self.requiredFieldsError("Please provide a password.")
                return
        }
        
        guard let passwordConfirmationValue = self.passwordConfirmation.text where !passwordConfirmationValue.isEmpty
            else {
                self.requiredFieldsError("Please repeat your password.")
                return
        }
        
        // If the passwords do not match, we don't allow anything to happen
        if passwordValue != passwordConfirmationValue {
            UIAlertView(title: "Password Mismatch", message: "Make sure your passwords matched!", delegate: nil, cancelButtonTitle: "Ok.  I'll fix it!").show()
            return
        }
        
        
        var attributes = [AWSCognitoIdentityUserAttributeType]()
        
        // email
        let email = AWSCognitoIdentityUserAttributeType()
        email.name = "email"
        email.value = emailValue
        attributes.append(email)
        
        //sign up the user
        self.pool?.signUp(netID, password: passwordValue, userAttributes: attributes, validationData: nil).continueWithBlock {[weak self] (task: AWSTask) -> AnyObject? in
            guard let strongSelf = self else { return nil }
            dispatch_async(dispatch_get_main_queue(), { 
                if let error = task.error {
                    UIAlertView(title: error.userInfo["__type"] as? String,
                        message: error.userInfo["message"] as? String,
                        delegate: nil,
                        cancelButtonTitle: "Ok").show()
                } else if let result = task.result as? AWSCognitoIdentityUserPoolSignUpResponse  {
                    // handle the case where user has to confirm his/her identity via email / SMS
                    if (result.user.confirmedStatus != AWSCognitoIdentityUserStatus.Confirmed) {
                        strongSelf.sentTo = result.codeDeliveryDetails?.destination
                        strongSelf.performSegueWithIdentifier("SignUpConfirmSegue", sender:sender)
                    } else {
                    UIAlertView(title: "Registration Complete",
                        message: "Registration was successful.",
                        delegate: nil,
                        cancelButtonTitle: "Ok").show()
                    strongSelf.navigationController?.popToRootViewControllerAnimated(true)
                }
                }
                
            })
            return nil
        }
    }

    @IBAction func onCancel(sender: AnyObject) {
        self.navigationController?.popViewControllerAnimated(true)
    }
    
    //MARK: - Private Helpers
    
    private func requiredFieldsError(message : String) {
        UIAlertView(title: "Missing Required Fields",
                    message: message,
                    delegate: nil,
                    cancelButtonTitle: "Ok.  I'll fix it!").show()
    }
}

extension String {
    var isAlphanumeric: Bool {
        let characterset = NSCharacterSet(charactersInString: "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLKMNOPQRSTUVWXYZ0123456789")
        return self.rangeOfCharacterFromSet(characterset.invertedSet) == nil
    }
}
